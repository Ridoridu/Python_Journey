{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPK4XwTTQJt/O06V987ABmh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ridoridu/Python_Journey/blob/main/Assessment_DataScience_Trainee.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "# Load the CSV file\n",
        "df = pd.read_csv('analytics.csv', sep=';')"
      ],
      "metadata": {
        "id": "-0y5e-VQHIba"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "28pCyIBWJMVR",
        "outputId": "5fcdb616-224a-4279-df73-ec1a4cb476c4"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Language   Users New Users Sessions Bounce Rate  Pages / Session  \\\n",
              "0    en-us  23,497    22,696   35,113       0.54%             6.35   \n",
              "1    id-id   7,797     7,613   10,617       0.65%             4.89   \n",
              "2    en-gb   3,198     3,086    4,625       0.56%             5.52   \n",
              "3       id   2,171     2,094    2,724       0.29%             4.75   \n",
              "4       en     224       214      295       3.05%             5.03   \n",
              "\n",
              "  Avg. Session Duration Goal Conversion Rate Goal Completions  Goal Value   \n",
              "0              00:02:32               27.21%            9,555       $0.00   \n",
              "1              00:01:38               16.26%            1,726       $0.00   \n",
              "2              00:01:50               21.36%              988       $0.00   \n",
              "3              00:01:43               17.18%              468       $0.00   \n",
              "4              00:01:44               26.78%               79       $0.00   "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-077f4d7f-6328-4394-a555-99ee4f579e39\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Language</th>\n",
              "      <th>Users</th>\n",
              "      <th>New Users</th>\n",
              "      <th>Sessions</th>\n",
              "      <th>Bounce Rate</th>\n",
              "      <th>Pages / Session</th>\n",
              "      <th>Avg. Session Duration</th>\n",
              "      <th>Goal Conversion Rate</th>\n",
              "      <th>Goal Completions</th>\n",
              "      <th>Goal Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>en-us</td>\n",
              "      <td>23,497</td>\n",
              "      <td>22,696</td>\n",
              "      <td>35,113</td>\n",
              "      <td>0.54%</td>\n",
              "      <td>6.35</td>\n",
              "      <td>00:02:32</td>\n",
              "      <td>27.21%</td>\n",
              "      <td>9,555</td>\n",
              "      <td>$0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>id-id</td>\n",
              "      <td>7,797</td>\n",
              "      <td>7,613</td>\n",
              "      <td>10,617</td>\n",
              "      <td>0.65%</td>\n",
              "      <td>4.89</td>\n",
              "      <td>00:01:38</td>\n",
              "      <td>16.26%</td>\n",
              "      <td>1,726</td>\n",
              "      <td>$0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>en-gb</td>\n",
              "      <td>3,198</td>\n",
              "      <td>3,086</td>\n",
              "      <td>4,625</td>\n",
              "      <td>0.56%</td>\n",
              "      <td>5.52</td>\n",
              "      <td>00:01:50</td>\n",
              "      <td>21.36%</td>\n",
              "      <td>988</td>\n",
              "      <td>$0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>id</td>\n",
              "      <td>2,171</td>\n",
              "      <td>2,094</td>\n",
              "      <td>2,724</td>\n",
              "      <td>0.29%</td>\n",
              "      <td>4.75</td>\n",
              "      <td>00:01:43</td>\n",
              "      <td>17.18%</td>\n",
              "      <td>468</td>\n",
              "      <td>$0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>en</td>\n",
              "      <td>224</td>\n",
              "      <td>214</td>\n",
              "      <td>295</td>\n",
              "      <td>3.05%</td>\n",
              "      <td>5.03</td>\n",
              "      <td>00:01:44</td>\n",
              "      <td>26.78%</td>\n",
              "      <td>79</td>\n",
              "      <td>$0.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-077f4d7f-6328-4394-a555-99ee4f579e39')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-077f4d7f-6328-4394-a555-99ee4f579e39 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-077f4d7f-6328-4394-a555-99ee4f579e39');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fbf7702b-61e6-484e-a638-52eecb77070a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fbf7702b-61e6-484e-a638-52eecb77070a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fbf7702b-61e6-484e-a638-52eecb77070a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Language\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"en-id\",\n          \"id-id\",\n          \"id-us\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Users\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"204\",\n          \"23,497\",\n          \"93\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Users\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"202\",\n          \"22,696\",\n          \"91\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sessions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"235\",\n          \"35,113\",\n          \"127\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bounce Rate\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"0.00%\",\n          \"0.65%\",\n          \"1.28%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pages / Session\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.090073392024592,\n        \"min\": 3.5,\n        \"max\": 6.92,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          3.64,\n          6.35,\n          5.56\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Avg. Session Duration\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"00:00:44\",\n          \"00:02:32\",\n          \"00:01:22\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Goal Conversion Rate\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"4.68%\",\n          \"27.21%\",\n          \"19.69%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Goal Completions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"25\",\n          \"1,726\",\n          \"11\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" Goal Value \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \" $0.00 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3rE9foFQJ72a",
        "outputId": "f7303f0b-f3fe-4aa2-d444-4baf76bc9697"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Language   Users New Users Sessions Bounce Rate  Pages / Session  \\\n",
            "0    en-us  23,497    22,696   35,113       0.54%             6.35   \n",
            "1    id-id   7,797     7,613   10,617       0.65%             4.89   \n",
            "2    en-gb   3,198     3,086    4,625       0.56%             5.52   \n",
            "3       id   2,171     2,094    2,724       0.29%             4.75   \n",
            "4       en     224       214      295       3.05%             5.03   \n",
            "\n",
            "  Avg. Session Duration Goal Conversion Rate Goal Completions  Goal Value   \n",
            "0              00:02:32               27.21%            9,555       $0.00   \n",
            "1              00:01:38               16.26%            1,726       $0.00   \n",
            "2              00:01:50               21.36%              988       $0.00   \n",
            "3              00:01:43               17.18%              468       $0.00   \n",
            "4              00:01:44               26.78%               79       $0.00   \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8a8jJcqILTWh",
        "outputId": "7acc11c8-dc63-4766-943e-0eaa0af4a5da"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 11 entries, 0 to 10\n",
            "Data columns (total 10 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   Language               10 non-null     object \n",
            " 1   Users                  11 non-null     object \n",
            " 2   New Users              11 non-null     object \n",
            " 3   Sessions               11 non-null     object \n",
            " 4   Bounce Rate            11 non-null     object \n",
            " 5   Pages / Session        11 non-null     float64\n",
            " 6   Avg. Session Duration  11 non-null     object \n",
            " 7   Goal Conversion Rate   11 non-null     object \n",
            " 8   Goal Completions       11 non-null     object \n",
            " 9    Goal Value            11 non-null     object \n",
            "dtypes: float64(1), object(9)\n",
            "memory usage: 1008.0+ bytes\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wH-4lPgDLUlX",
        "outputId": "9abb96f0-bcdd-4862-e16e-40e84f364a86"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       Pages / Session\n",
            "count        11.000000\n",
            "mean          5.310000\n",
            "std           1.090073\n",
            "min           3.500000\n",
            "25%           4.820000\n",
            "50%           5.520000\n",
            "75%           6.105000\n",
            "max           6.920000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**QUESTION**\n",
        "\n",
        "1. Value of en-id should hence be stored as en, and a value of id-jp should similarly be id. Fill missing values with missing. This should result in en, id, th and missing as valid values in the Language column. Which language has on average, the highest Pages / Session count?\n",
        "\n"
      ],
      "metadata": {
        "id": "2qqVkSniQjNM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Clean the \"Language\" column to keep only the first part before the hyphen\n",
        "df['language_cleaned'] = df[\"Language\"].str.split('-').str[0]\n",
        "\n",
        "# Fill missing values with 'missing\n",
        "df['language_cleaned'].fillna('missing', inplace=True)\n",
        "\n",
        "print(df['language_cleaned'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6sPoRf1BJrX-",
        "outputId": "5369e054-7d3a-4fe3-9c4a-f36434d7f872"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0          en\n",
            "1          id\n",
            "2          en\n",
            "3          id\n",
            "4          en\n",
            "5          id\n",
            "6          th\n",
            "7          en\n",
            "8          en\n",
            "9          en\n",
            "10    missing\n",
            "Name: language_cleaned, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ensure that the Pages/Session column is in numeric format\n",
        "df['Pages / Session'] = pd.to_numeric(df['Pages / Session'], errors='coerce')\n",
        "\n",
        "# Group by the cleaned language column and calculate the mean of Pages/Session\n",
        "language_avg_pages_session = df.groupby('language_cleaned')['Pages / Session'].mean()\n",
        "\n",
        "print(language_avg_pages_session)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "40JZjr7zNHoc",
        "outputId": "22ceec2d-740e-4bad-8589-7f0152528f92"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "language_cleaned\n",
            "en         5.961667\n",
            "id         4.426667\n",
            "missing    5.860000\n",
            "th         3.500000\n",
            "Name: Pages / Session, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the language with the highest average Pages/Session\n",
        "highest_avg_language = language_avg_pages_session.idxmax()\n",
        "highest_avg_language_value = language_avg_pages_session.max()\n",
        "\n",
        "print(f\"The language with the highest average Pages/Session is {highest_avg_language} with an average of {highest_avg_language_value:.2f} Pages/Session.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qiQNhVZzQN-T",
        "outputId": "1fa00bfe-3493-4a64-ac08-9f50b8943d59"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The language with the highest average Pages/Session is en with an average of 5.96 Pages/Session.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "QUESTION\n",
        "2.   Use any tools of your choice, run a closed-form, simple linear regression to predict Goal Conversion Rate (target) using the values of Pages / Session (predictor). Call this model_A. What is the multiple R-squared from your simple linear regression, model_A, rounded to 3 decimal points? You can retrieve this value through sklearn.metrics.r2_score or summary(model)$r.squared"
      ],
      "metadata": {
        "id": "nPLJqNVSQ2MD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "YwTsIOUPRBDN"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert 'Goal Converstion Rate' to numeric by removing '% and converting to float\n",
        "if df['Goal Conversion Rate'].dtype == 'object':\n",
        "  df['Goal Conversion Rate'] = df['Goal Conversion Rate'].str.rstrip('%').astype('float') / 100.0\n",
        "\n",
        "# Pisahkan variabel prediktor dan target\n",
        "x = df['Pages / Session']\n",
        "y = df['Goal Conversion Rate']"
      ],
      "metadata": {
        "id": "4zK_F2jOT3k0"
      },
      "execution_count": 172,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42) # Adjust test_size and random_state as needed"
      ],
      "metadata": {
        "id": "J3CZRj37hfMS"
      },
      "execution_count": 173,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape)\n",
        "print(y_train.shape)\n",
        "\n",
        "print(X_train.dtypes)\n",
        "print(y_train.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3eD7rhRNY9Vu",
        "outputId": "55250f30-bfb1-4b24-fc5c-520c2c4c0863"
      },
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(8,)\n",
            "(8,)\n",
            "float64\n",
            "float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Inisialisasi model regresi linear\n",
        "model_A = LinearRegression()\n",
        "\n",
        "# Reshape x to be a 2D array\n",
        "x_reshaped = x.values.reshape(-1,1)\n",
        "\n",
        "# Latih model menggunakan data training\n",
        "model_A.fit(x_reshaped, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "AjqBjMZ6Y8WK",
        "outputId": "4c7320d2-056b-44d8-94ef-032b2eda2f00"
      },
      "execution_count": 175,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 175
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prediksi data testing\n",
        "y_pred = model_A.predict(X_test.values.reshape(-1, 1))  # Reshape X_test to a 2D array\n",
        "\n",
        "# Hitung nilai R-squared\n",
        "r_squared = r2_score(y_test, y_pred)\n",
        "\n",
        "# Cetak nilai R-squared\n",
        "print(f\"Nilai R-squared dari model_A: {r_squared:.3f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fXIgqDTheqOh",
        "outputId": "cc2e8d31-5822-40f8-816f-cec8a848c57b"
      },
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nilai R-squared dari model_A: 0.926\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**QUESTION**\n",
        "3. Let beta0 be the intercept and beta1​ be your slope. What is the value of beta0?\n",
        "\n"
      ],
      "metadata": {
        "id": "yTbK6XSUiKM4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mendapatkan nilai beta0 dan beta1\n",
        "beta0 = model_A.intercept_\n",
        "beta1 = model_A.coef_[0]\n",
        "print(f\"beta0: {beta0}\")\n",
        "print(f\"beta1: {beta1}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M765zI64iW1w",
        "outputId": "ccbd8aec-2ab0-4819-c16c-ea7ae0228c18"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "beta0: -0.2518822560259999\n",
            "beta1: 0.08650068166899502\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**QUESTION**\n",
        "4. Add Language as an additional predictor to the earlier linear regression model. Call this model_B. Did your multiple R-squared model improved as a result? Compare the adjusted R-squared of two models model_A and model_B."
      ],
      "metadata": {
        "id": "h8TVqzuXioib"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x=df[['Pages / Session']]\n",
        "\n",
        "# Konversi kolom 'Language' ke dalam bentuk one-hot encoding\n",
        "language_dummies = pd.get_dummies(df['language_cleaned'], drop_first=True)\n",
        "\n",
        "# Gabungkan hasil one-hot encoding dengan 'Page / Session'\n",
        "x_b = pd.concat([df[['Pages / Session']], language_dummies], axis=1)\n",
        "\n",
        "# Variabel target tetap sama\n",
        "y = df['Goal Conversion Rate']"
      ],
      "metadata": {
        "id": "2oJswAjWioCa"
      },
      "execution_count": 212,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Inisialisasi model regresi linier baru\n",
        "model_B = LinearRegression()\n",
        "\n",
        "# Latih model dengan prediktor baru (Pages / Session + Language)\n",
        "model_B.fit(x_b, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "d_vcZaq5l1Bm",
        "outputId": "57065677-37b3-4300-a4c0-e08ec117f3e9"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {color: black;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prediksi untuk model_A\n",
        "y_pred_A = model_A.predict(df[['Pages / Session']])\n",
        "\n",
        "# Prediksi untuk model_B\n",
        "y_pred_B = model_B.predict(x_b)\n",
        "\n",
        "# Hitung R-squared untuk kedua model\n",
        "r2_A = r2_score(y, y_pred_A)\n",
        "r2_B = r2_score(y, y_pred_B)\n",
        "\n",
        "# Hitung Adjusted R-squeared\n",
        "n = len(y) # jumlah observasi\n",
        "p_A = x.shape[1] # jumlah prediktor dalam model_A (1)\n",
        "p_B = x_b.shape[1] # jumlah prediktor dalam model_B (Pages / Session + Language)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fAxlgh4Lpy29",
        "outputId": "c6506361-f6a3-48c3-a0cb-588552afa0b7"
      },
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:458: UserWarning: X has feature names, but LinearRegression was fitted without feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "adj_r2_A = 1- (1-r2_A) * (n-1) / (n-p_A-1)\n",
        "adj_r2_B = 1- (1-r2_B) * (n-1) / (n-p_B-1)\n",
        "\n",
        "print(f\"Adjusted R-squared model_A: {adj_r2_A}\")\n",
        "print(f\"Adjusted R-squared model_B: {adj_r2_B}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ffq5Ny6nrKli",
        "outputId": "7bd14d70-95b1-47fe-8068-aa9925c3463b"
      },
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Adjusted R-squared model_A: 0.8507883827081769\n",
            "Adjusted R-squared model_B: 0.7859109501561988\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "D. model_B has a higher multiple R2 but lower Adjusted R2 value"
      ],
      "metadata": {
        "id": "JMyqfGXAsaqY"
      }
    }
  ]
}
